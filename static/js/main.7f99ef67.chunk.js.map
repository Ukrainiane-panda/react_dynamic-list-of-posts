{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/errors.ts","api/comments.ts","components/ErrorIcon.tsx","types/validateEmail.ts","components/NewCommentForm.tsx","components/commetsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","selectedPost","isCommentListHidden","openDetails","closeCommentList","length","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorMessage","client","getComments","postId","deleteComment","commentId","addComment","comment","ErrorIcon","validateEmail","userEmail","RegExp","test","toLowerCase","NewCommentForm","setErrorMessage","setComments","useState","name","setName","email","setEmail","setComment","hasName","setHasName","hasEmail","setHasEmail","isEmailValid","setIsEmailValid","hasComment","setHasComment","isCommentAdding","setIsCommentAdding","addNewComment","useCallback","a","newComment","fetchedComment","prevComments","ADD","handleFormSubmit","event","isNotValid","preventDefault","trimmedComment","trim","onSubmit","htmlFor","placeholder","cn","value","onChange","currentTarget","CommentsList","comments","handleDeleteComment","filter","DELETE","href","PostDetails","errorMessage","isFetching","isCommentFormOpen","openCommentsForm","errorTypes","COMMENTS","includes","UserSelector","users","selected","getUsersPosts","onSelect","setIsCommentsListHidden","isVisible","setIsVisible","selectRef","useRef","handleClickOutside","target","current","useEffect","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","getPosts","userId","App","setUsers","setPosts","setSelectedPost","selectedUser","setSelectedUser","isCommentsFetching","setIsCommentsFetching","setIsCommentListHidden","setIsCommentFormOpen","isPostlistVisible","setIsPostListVisible","isLoaderVisible","setIsLoaderVisible","isDataLoaded","setIsDataLoaded","fetchUsers","fetchedUsers","USERS","fetchPosts","fetchedPosts","POSTS","fetchCommentsByPostId","fetchedComments","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7f99ef67.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: Post | null;\n  isCommentListHidden: boolean;\n  openDetails: (post: Post) => void;\n  closeCommentList: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  isCommentListHidden,\n  openDetails,\n  closeCommentList,\n}) => {\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {isCommentListHidden && (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => openDetails(post)}\n                  >\n                    Open\n                  </button>\n                )}\n\n                {!isCommentListHidden && (\n                  post.id === selectedPost?.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => closeCommentList(true)}\n                      >\n                        Close\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => openDetails(post)}\n                      >\n                        Open\n                      </button>\n                    ))}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  ADD = 'Something went wrong on comment add!',\n  POSTS = 'Something went wrong on posts load!',\n  USERS = 'Something went wrong on users load!',\n  DELETE = 'Something went wrong on comment delete!',\n  COMMENTS = 'Something went wrong on comments load!',\n}\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Comment): Promise<Comment> => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\n\nexport const ErrorIcon: React.FC = () => (\n  <span\n    className=\"icon is-small is-right has-text-danger\"\n    data-cy=\"ErrorIcon\"\n  >\n    <i className=\"fas fa-exclamation-triangle\" />\n  </span>\n);\n","export const validateEmail = (userEmail: string): boolean => {\n  const emailRegex = new RegExp(\n    // eslint-disable-next-line\n    '^(([^<>()[\\\\]\\\\.,;:\\\\s@\"]+(\\\\.[^<>()[\\\\]\\\\.,;:\\\\s@\"]+)*)|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$'\n  );\n\n  return emailRegex.test(userEmail.toLowerCase());\n};\n","import React, { useState, useCallback, FormEvent } from 'react';\nimport cn from 'classnames';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/errors';\nimport { ErrorIcon } from './ErrorIcon';\nimport { validateEmail } from '../types/validateEmail';\n\ninterface Props {\n  post: Post | null;\n  setErrorMessage: React.Dispatch<React.SetStateAction<ErrorMessage | null>>;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setErrorMessage,\n  setComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [hasName, setHasName] = useState(true);\n  const [hasEmail, setHasEmail] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [hasComment, setHasComment] = useState(true);\n  const [isCommentAdding, setIsCommentAdding] = useState(false);\n\n  const addNewComment = useCallback(async () => {\n    setIsCommentAdding(true);\n\n    try {\n      const newComment: Comment = {\n        id: 0,\n        postId: post?.id ?? 0,\n        name,\n        email,\n        body: comment,\n      };\n\n      const fetchedComment = await addComment(newComment);\n\n      setComment('');\n      setComments(prevComments => [...prevComments, fetchedComment]);\n    } catch (error) {\n      setErrorMessage(ErrorMessage.ADD);\n    } finally {\n      setIsCommentAdding(false);\n      setHasName(true);\n      setHasEmail(true);\n      setHasComment(true);\n    }\n  }, [name, email, comment, post, setComments, setErrorMessage]);\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    let isNotValid;\n    const trimmedComment = comment.trim();\n\n    if (!email || !name || !validateEmail(email) || !trimmedComment) {\n      isNotValid = true;\n    }\n\n    if (!name) {\n      setHasName(false);\n    }\n\n    if (!validateEmail(email)) {\n      setIsEmailValid(false);\n    }\n\n    if (!trimmedComment) {\n      setHasComment(false);\n    }\n\n    if (isNotValid) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setHasName(true);\n    setHasEmail(true);\n    setHasComment(true);\n    setIsEmailValid(true);\n  };\n\n  const handleNameChange = (event: FormEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n    setHasName(true);\n  };\n\n  const handleEmailChange = (event: FormEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n    setHasEmail(true);\n    setIsEmailValid(true);\n  };\n\n  const handleCommentChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    setComment(event.currentTarget.value);\n    setHasComment(true);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': !hasName,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!hasName && <ErrorIcon />}\n\n        </div>\n\n        {!hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': !hasEmail,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(!hasEmail || !isEmailValid) && (\n            <ErrorIcon />\n          )}\n        </div>\n\n        {(!hasEmail || !isEmailValid) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': !hasComment,\n            })}\n            value={comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {!hasComment\n          && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', {\n              'is-loading': isCommentAdding,\n            })}\n            onClick={handleFormSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { ErrorMessage } from '../types/errors';\nimport { deleteComment } from '../api/comments';\n\ninterface Props {\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setErrorMessage: React.Dispatch<React.SetStateAction<ErrorMessage | null>>;\n}\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setComments,\n  setErrorMessage,\n}) => {\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComments(prevComments => prevComments\n        .filter(({ id }) => id !== commentId));\n      await deleteComment(commentId);\n    } catch (error) {\n      setErrorMessage(ErrorMessage.DELETE);\n    }\n  };\n\n  if (!comments.length) {\n    return (\n      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n        No comments yet\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { ErrorMessage } from '../types/errors';\nimport { CommentsList } from './commetsList';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  post: Post | null;\n  errorMessage: ErrorMessage | null;\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setErrorMessage: React.Dispatch<React.SetStateAction<ErrorMessage | null>>;\n  isFetching: boolean;\n  isCommentFormOpen: boolean;\n  openCommentsForm: (value: boolean) => void;\n}\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  errorMessage,\n  comments,\n  setErrorMessage,\n  setComments,\n  isFetching,\n  isCommentFormOpen,\n  openCommentsForm,\n}) => {\n  const handleOpenCommentForm = () => {\n    openCommentsForm(true);\n  };\n\n  const errorTypes: ErrorMessage[] = [\n    ErrorMessage.ADD,\n    ErrorMessage.DELETE,\n    ErrorMessage.COMMENTS,\n  ];\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFetching && (\n            <Loader />\n          )}\n\n          {errorMessage && errorTypes.includes(errorMessage)\n            && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                {errorMessage}\n              </div>\n            )}\n\n          {(errorMessage !== ErrorMessage.COMMENTS)\n            && (\n              <CommentsList\n                comments={comments}\n                setComments={setComments}\n                setErrorMessage={setErrorMessage}\n              />\n            )}\n\n          {!isCommentFormOpen\n            ? (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleOpenCommentForm}\n              >\n                Write a comment\n              </button>\n            )\n            : (\n              <NewCommentForm\n                post={post}\n                setComments={setComments}\n                setErrorMessage={setErrorMessage}\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[];\n  selected: User | null;\n  getUsersPosts: (userId: number) => void;\n  onSelect: React.Dispatch<React.SetStateAction<User | null>>;\n  setIsCommentsListHidden: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selected,\n  getUsersPosts,\n  onSelect,\n  setIsCommentsListHidden,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const selectRef = useRef(null);\n\n  const handleSelectUser = (user: User) => {\n    onSelect(user);\n    setIsVisible(false);\n    getUsersPosts(user.id);\n    setIsCommentsListHidden(true);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event.target !== selectRef.current && isVisible) {\n      setIsVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [isVisible]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={selectRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisible(true)}\n        >\n          <span>\n            {selected\n              ? selected.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': user.id === selected?.id,\n                })}\n                onClick={() => handleSelectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { ErrorMessage } from './types/errors';\nimport { Comment } from './types/Comment';\nimport { getComments } from './api/comments';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [errorMessage, setErrorMessage] = useState<ErrorMessage | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isCommentsFetching, setIsCommentsFetching] = useState(false);\n  const [isCommentListHidden, setIsCommentListHidden] = useState(true);\n  const [isCommentFormOpen, setIsCommentFormOpen] = useState(false);\n  const [isPostlistVisible, setIsPostListVisible] = useState(false);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      const fetchedUsers = await getUsers();\n\n      setUsers(fetchedUsers);\n      setIsDataLoaded(true);\n    } catch {\n      setErrorMessage(ErrorMessage.USERS);\n    }\n  };\n\n  const fetchPosts = async (userId: number) => {\n    setIsLoaderVisible(true);\n    setIsPostListVisible(false);\n\n    try {\n      const fetchedPosts = await getPosts(userId);\n\n      setPosts(fetchedPosts);\n      setIsPostListVisible(true);\n      setIsDataLoaded(true);\n    } catch {\n      setErrorMessage(ErrorMessage.POSTS);\n      setIsPostListVisible(false);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  const fetchCommentsByPostId = async (postId: number) => {\n    setIsCommentsFetching(true);\n    setIsCommentListHidden(false);\n\n    try {\n      const fetchedComments = await getComments(postId);\n\n      setComments(fetchedComments);\n      setIsPostListVisible(true);\n      setIsDataLoaded(true);\n    } catch (error) {\n      setErrorMessage(ErrorMessage.COMMENTS);\n    } finally {\n      setIsCommentsFetching(false);\n    }\n  };\n\n  const handleOpenDetails = (post: Post) => {\n    setSelectedPost(post);\n    fetchCommentsByPostId(post.id);\n    setIsCommentFormOpen(false);\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        {isDataLoaded\n          && (\n            <div className=\"tile is-ancestor\">\n              <div className=\"tile is-parent\">\n                <div className=\"tile is-child box is-success\">\n\n                  <div className=\"block\">\n                    <UserSelector\n                      users={users}\n                      selected={selectedUser}\n                      onSelect={setSelectedUser}\n                      getUsersPosts={fetchPosts}\n                      setIsCommentsListHidden={setIsCommentListHidden}\n                    />\n                  </div>\n\n                  <div className=\"block\" data-cy=\"MainContent\">\n                    {!selectedUser && (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    )}\n\n                    {isLoaderVisible && !isPostlistVisible && (\n                      <Loader />\n                    )}\n\n                    {errorMessage\n                      && (ErrorMessage.USERS || ErrorMessage.POSTS)\n                      && (\n                        <div\n                          className=\"notification is-danger\"\n                          data-cy=\"PostsLoadingError\"\n                        >\n                          {errorMessage}\n                        </div>\n                      )}\n\n                    {isPostlistVisible && (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        openDetails={handleOpenDetails}\n                        closeCommentList={setIsCommentListHidden}\n                        isCommentListHidden={isCommentListHidden}\n                      />\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {!isCommentListHidden && (\n                <div\n                  data-cy=\"Sidebar\"\n                  className={cn(\n                    'tile',\n                    'is-parent',\n                    'is-8-desktop',\n                    'Sidebar',\n                    'Sidebar--open',\n                  )}\n                >\n                  <div className=\"tile is-child box is-success \">\n                    <PostDetails\n                      post={selectedPost}\n                      errorMessage={errorMessage}\n                      comments={comments}\n                      setErrorMessage={setErrorMessage}\n                      setComments={setComments}\n                      isFetching={isCommentsFetching}\n                      isCommentFormOpen={isCommentFormOpen}\n                      openCommentsForm={setIsCommentFormOpen}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}